#############Random Forest#######################
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Step 1: Read data
data = pd.read_csv('/Users/sarvajeethuk/Downloads/E_Descriptors_Final.csv')

# Step 2: Data Preprocessing
X_sequences = data['Protein_sequence']  # Amino acid sequences
X_features = data[['E1', 'E2', 'E3', 'E4', 'E5', 'E9', 'E10', 'E6', 'E7', 'E8']]  # Additional features
X = pd.concat([X_sequences, X_features], axis=1)  # Combine sequences and features

y = data['E11']  # Target variable

# One-hot encoding for amino acid sequences (example)
# You may need to implement a more sophisticated encoding method
X_encoded = pd.get_dummies(X['Protein_sequence'].apply(list).apply(pd.Series).stack()).groupby(level=0).sum()

# Combine one-hot encoded sequences with additional features
X_encoded = pd.concat([X_encoded, X_features.reset_index(drop=True)], axis=1)

# Step 3: Model Selection and Training
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Initialize and train the Random Forest Classifier
clf = RandomForestClassifier(random_state=42)
clf.fit(X_train_scaled, y_train)

# Step 4: Model Evaluation
y_pred = clf.predict(X_test_scaled)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy: {:.2f}%".format(accuracy * 100))
print(classification_report(y_test, y_pred))





#############Artificial Neural Network#######################
import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report

# Step 1: Read data
data = pd.read_csv('/Users/sarvajeethuk/Downloads/E_Descriptors_Final.csv')

# Step 2: Data Preprocessing
X_sequences = data['Protein_sequence']  # Amino acid sequences
X_features = data[['E1', 'E2', 'E3', 'E4', 'E5', 'E9', 'E10', 'E6', 'E7', 'E8']]  # Additional features
X = pd.concat([X_sequences, X_features], axis=1)  # Combine sequences and features

y = data['E11']  # Target variable

# One-hot encoding for amino acid sequences (example)
# You may need to implement a more sophisticated encoding method
X_encoded = pd.get_dummies(X['Protein_sequence'].apply(list).apply(pd.Series).stack()).groupby(level=0).sum()

# Combine one-hot encoded sequences with additional features
X_encoded = pd.concat([X_encoded, X_features.reset_index(drop=True)], axis=1)

# Step 3: Model Selection and Training
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Convert target labels to one-hot encoding
num_classes = len(np.unique(y))
y_train_one_hot = tf.keras.utils.to_categorical(y_train, num_classes)
y_test_one_hot = tf.keras.utils.to_categorical(y_test, num_classes)

# Initialize the model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(128, activation='relu', input_shape=(X_train_scaled.shape[1],)),
    tf.keras.layers.Dropout(0.3),  # Adding dropout for regularization
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(num_classes, activation='softmax')
])

# Compile the model with different learning rate
optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)

model.compile(optimizer=optimizer,
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Train the model with different batch size and epochs
history = model.fit(X_train_scaled, y_train_one_hot, epochs=20, batch_size=64, validation_split=0.2, verbose=1)

# Step 4: Model Evaluation
y_pred_one_hot = model.predict(X_test_scaled)
y_pred = np.argmax(y_pred_one_hot, axis=1)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy: {:.2f}%".format(accuracy * 100))
print(classification_report(y_test, y_pred))







#############Hyper Parameters#######################
import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report

# Step 1: Read data
data = pd.read_csv('/Users/sarvajeethuk/Downloads/IP/Final/E_Descriptors_Final.csv')

# Step 2: Data Preprocessing
X_sequences = data['Protein_sequence']  # Amino acid sequences
X_features = data[['E1', 'E2', 'E3', 'E4', 'E5', 'E9', 'E10', 'E6', 'E7', 'E8']]  # Additional features
X = pd.concat([X_sequences, X_features], axis=1)  # Combine sequences and features

y = data['E11']  # Target variable

# One-hot encoding for amino acid sequences (example)
# You may need to implement a more sophisticated encoding method
X_encoded = pd.get_dummies(X['Protein_sequence'].apply(list).apply(pd.Series).stack()).groupby(level=0).sum()

# Combine one-hot encoded sequences with additional features
X_encoded = pd.concat([X_encoded, X_features.reset_index(drop=True)], axis=1)

# Step 3: Model Selection and Training
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Convert target labels to one-hot encoding
num_classes = len(np.unique(y))
y_train_one_hot = tf.keras.utils.to_categorical(y_train, num_classes)
y_test_one_hot = tf.keras.utils.to_categorical(y_test, num_classes)

# Define hyperparameters to iterate over
epochs_list = [10, 20, 30]
optimizer_list = ['adam', 'sgd']
activation_list = ['relu', 'tanh']

# Iterate over hyperparameters
for epochs in epochs_list:
    for optimizer in optimizer_list:
        for activation in activation_list:
            # Initialize the model
            model = tf.keras.Sequential([
                tf.keras.layers.Dense(64, activation=activation, input_shape=(X_train_scaled.shape[1],)),
                tf.keras.layers.Dense(32, activation=activation),
                tf.keras.layers.Dense(num_classes, activation='softmax')
            ])
            
            # Compile the model
            model.compile(optimizer=optimizer,
                          loss='categorical_crossentropy',
                          metrics=['accuracy'])
            
            # Train the model
            model.fit(X_train_scaled, y_train_one_hot, epochs=epochs, batch_size=32, validation_split=0.2, verbose=0)
            
            # Evaluate the model
            _, accuracy = model.evaluate(X_test_scaled, y_test_one_hot, verbose=0)
            
            print(f'Epochs: {epochs}, Optimizer: {optimizer}, Activation: {activation}, Test Accuracy: {accuracy * 100:.2f}%')
